#!/bin/bash
# script that relies on pmtoggle to create a file in /tmp
# then activates a power profile change in response to changes in AC supply.
# tested on GNOME. Should work on non-GNOME DEs

## Variables: (change as needed)
#change ACOFF to the script you want to run when AC is not connected. Keep entire command in quotations
ACOFF="system76-power profile battery"
#change ACON to the script you want to run when AC is connected. Keep entire command in quotations
ACON="system76-power profile performance"
#value to enable toggling turbo boost as well. 0 is disabled, 1 is enabled. Default is disabled (0)
TURBO=0
#value to enable turbo-load as well. 0 is disabled, 1 is enabled. Default is disabled (0)
TURBO_LOAD=0
#change USERNAME if needed manually. This attempts to automatically determine your username
USERNAME=$(who | grep "\(${_display_id}\)" | awk '{print $1}' | head -n 1)
#USERNAME=

######################################################################
## DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING ##
######################################################################

## Functions:
function runas() {
    ### This function is meant for sudo to run commands on behalf of USERNAME, concerning GUI applications like gsettings or notify-send ###
    ### Adapted from https://stackoverflow.com/questions/20292578/setting-gsettings-of-other-user-with-sudo ###
    display_id=":$(ls /tmp/.X11-unix/ | sort | head -n 1 | cut -c 2-)"
    user_id=$(id -u "$USERNAME")
    environment=("DISPLAY=$display_id" "DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$user_id/bus")
    sudo -Hu "$USERNAME" env "${environment[@]}" "$@" #run as sudo
}

function checker() {
    ### This function checks pmtoggle to see whether the system is connected to power ###
    if [ ! -z "$(tail -n2 /tmp/pmtoggle | grep '0')" ]; then #AC not attached
        runas notify-send --transient "Power Management" "AC disconnected. Applying changes."
        $ACOFF #first toggle power profile
        $1 #then do the optional args
        $TURBO_OFF #then toggle turbo
        if [ $TURBO_LOAD -eq 1 ]; then
            systemctl stop turbo-load.service
        fi
        echo "> AC not attached. Applying changes..."
    else #AC attached
        runas notify-send --transient "Power Management" "AC connected. Applying changes."
        $ACON
        $2
        $TURBO_ON
        if [ $TURBO_LOAD -eq 1 ]; then
            systemctl restart turbo-load.service
        fi
        echo "> AC attached. Applying changes..."
    fi
}

function toggler() {
    ### Function to run CHECKER and monitor PMTOGGLE through inexpensive polling ###
    checker "$1" "$2" #run once first in case
    inotifywait --monitor --format "%e %w%f" --event modify,create /tmp/pmtoggle | while read changed; do
        checker "$1" "$2"
    done
}

## Main flow:
# When running toggler with positional args, alternate between commands to run with AC Off, then AC On, then AC Off, etc.
# This ensures correct commands are assigned. Refer to comments in function CHECKER
pmtoggle # If this be first boot, run pmtoggle manually
if [[ "$TURBO" -eq "1" ]]; then
  TURBO_ON="echo '1' | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo" #turn on turbo boost
  TURBO_OFF="echo '0' | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo" #turn off turbo boost
fi

if ! [[ -z "$(ls /usr/bin/*-session | grep gnome)" ]]; then #check if we are on gnome
  echo "> Running on gnome..." #if yes, run toggler with additional gsettings args to toggle animations
  toggler "runas gsettings set org.gnome.desktop.interface enable-animations false" "runas gsettings set org.gnome.desktop.interface enable-animations true"
else
  echo "> Not running on gnome..." #if not on gnome, run toggler normally
  toggler
fi
